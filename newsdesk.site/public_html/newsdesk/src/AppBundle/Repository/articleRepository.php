<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use AppBundle\Entity\Article;
use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Validator\Constraints\Date;
use DoctrineExtensions\Query\Mysql;
use DoctrineExtensions\Query\Mysql\DateFormat;


/**
 * articleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class articleRepository extends EntityRepository
{
    /**
     * @param $category
     * @return Article[]
     */
    public function findByCategory($category)
    {
        return $this
            ->createQueryBuilder('article')
            ->where("article.category = :category")
            ->setParameter('category', $category)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param int $article
     * @param int $limit
     * @param $id
     * @return Article[]
     */
    public function searchArticles($article = 1, $limit = 3, $id)
    {
        $queryPages = $this->createQueryBuilder('article')
            ->where("article.category = :id")
            ->setParameter('id', $id);
        $queryPages->setMaxResults($limit);
        $queryPages->setFirstResult(($limit * $article) - $limit);
        return $queryPages->getQuery()->getResult();
    }

    /**
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function countPage()
    {
        $queryPages = $this->createQueryBuilder('page')->select('count(page.id)');
        $result = $queryPages->getQuery()->getOneOrNullResult();
        return $result ? array_shift($result) : 0;
    }

    public function findByWord($word)
    {
        $queryPages = $this->createQueryBuilder('page')
            ->where('page.body Like :word');
        $queryPages->setParameter('word', '%'.$word.'%');
        $queryPages->setMaxResults(20);
        return $queryPages->getQuery()->getResult();
    }

    public function findTodaysNewsAction()
    {
        $date = (new \DateTime())->format('Y, m, d');

        $daysPages = $this
            ->createQueryBuilder('article')
            ->where("DATE_FORMAT(article.createdate, '%Y, %m, %d') = :date")
            ->setParameter('date', $date)
            ->getQuery()
            ->getResult();

        return $daysPages;
    }
}
